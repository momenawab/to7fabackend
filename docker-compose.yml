version: '3.8'

services:
  # ==========================================
  # MySQL Database Service
  # ==========================================
  mysql:
    image: mysql:8.0
    container_name: to7fa-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-rootpass}
      MYSQL_DATABASE: ${DB_NAME:-to7fa_db}
      MYSQL_USER: ${DB_USER:-django_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-strongpass}
    volumes:
      - mysql-data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - to7fa-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_PASSWORD:-rootpass}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ==========================================
  # Redis Service (for Django Channels)
  # ==========================================
  redis:
    image: redis:7-alpine
    container_name: to7fa-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - to7fa-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==========================================
  # Django Application Service
  # ==========================================
  django:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: to7fa-django
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-True}
      - SECRET_KEY=${SECRET_KEY:-django-insecure-q2(^inryyn2zv9pky+rr+us=!bn2tph!^m&5bx2hiie)zreg4y}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
      - DB_ENGINE=${DB_ENGINE:-django.db.backends.mysql}
      - DB_NAME=${DB_NAME:-to7fa_db}
      - DB_USER=${DB_USER:-django_user}
      - DB_PASSWORD=${DB_PASSWORD:-strongpass}
      - DB_HOST=mysql
      - DB_PORT=3306
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CORS_ALLOW_ALL_ORIGINS=${CORS_ALLOW_ALL_ORIGINS:-True}
      - CORS_ALLOW_CREDENTIALS=${CORS_ALLOW_CREDENTIALS:-True}
    volumes:
      - ./media:/app/media
      - ./staticfiles:/app/staticfiles
    ports:
      - "8000:8000"
    networks:
      - to7fa-network
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        uvicorn to7fabackend.asgi:application --host 0.0.0.0 --port 8000 --workers 4
      "
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health/', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ==========================================
  # Nginx Reverse Proxy Service
  # ==========================================
  nginx:
    image: nginx:alpine
    container_name: to7fa-nginx
    restart: unless-stopped
    depends_on:
      - django
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./media:/app/media:ro
      - ./staticfiles:/app/staticfiles:ro
    ports:
      - "80:80"
    networks:
      - to7fa-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

# ==========================================
# Networks
# ==========================================
networks:
  to7fa-network:
    driver: bridge

# ==========================================
# Volumes (Persistent Storage)
# ==========================================
volumes:
  mysql-data:
    driver: local
  redis-data:
    driver: local
